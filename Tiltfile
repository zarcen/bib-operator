# Tiltfile for the bib-operator

# --- Configuration ---
# Update this with the name of your operator image
IMG_NAME = 'ghcr.io/zarcen/bib-operator'
# The name of your local kind cluster (should match your Makefile)
KIND_CLUSTER_NAME = 'kind-bib-operator'
# ---------------------


# Load the official kind extension to handle image loading
load('ext://tilt-extensions/kind/kind.tilt', 'kind_cluster')

# Configure Tilt to use your local kind cluster
kind_cluster(name=KIND_CLUSTER_NAME)

# Define how to build the operator's container image.
# The `live_update` feature enables hot-reloading for an ultra-fast feedback loop.
docker_build(
    IMG_NAME,
    '.',
    live_update=[
        # When Go files change, sync them into the running container
        sync('./', '/workspace'),
        # ...and then recompile and restart the manager binary inside the container
        run(
            'go install -v ./cmd/main.go',
            # This trigger ensures the command only runs when a Go file changes
            trigger=['./cmd/**/*.go', './api/**/*.go', './internal/**/*.go']
        )
    ]
)

# Load all the necessary Kubernetes manifests generated by Kubebuilder
print('Loading Kubernetes manifests...')
k8s_yaml(local('config/crd/bases'))
k8s_yaml(local('config/rbac/role.yaml'))
k8s_yaml(local('config/manager/manager.yaml'))
k8s_yaml(local('config/rbac/auth_proxy_service.yaml'))
k8s_yaml(local('config/rbac/auth_proxy_client_clusterrole.yaml'))


# Define the main operator deployment as a resource for Tilt to manage.
# This gives us log streaming and status updates in the Tilt UI.
k8s_resource(
    'bib-operator-controller-manager',
    namespace='bib-operator-system',
    port_forwards=["8080", "8443"] # Standard ports for metrics and webhooks
)

print('Tilt is ready! Your dev environment is live at http://localhost:10350/')